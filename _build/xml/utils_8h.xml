<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">future</includes>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">termios.h</includes>
    <includedby refid="inputasync_8cpp" local="yes">src/inputasync.cpp</includedby>
    <includedby refid="ui_8cpp" local="yes">src/ui.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>termios.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="1">
        <label>include/rt1-assignment3/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>future</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="5">
        <label>thread</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/rt1-assignment3/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/inputasync.cpp</label>
        <link refid="inputasync_8cpp"/>
      </node>
      <node id="3">
        <label>src/ui.cpp</label>
        <link refid="ui_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="utils_8h_1a22d7c3e857afba4903a76181f91ea9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearInputBuffer</definition>
        <argsstring>()</argsstring>
        <name>clearInputBuffer</name>
        <briefdescription>
<para>Some utility functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the input buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="14" column="6" bodyfile="include/rt1-assignment3/utils.h" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a46ff89009e317faa9748627b96c755be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int detectKeyPress</definition>
        <argsstring>()</argsstring>
        <name>detectKeyPress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detects user key press <simplesect kind="return"><para>ASCII code of pressed key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="22" column="5" bodyfile="include/rt1-assignment3/utils.h" bodystart="22" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a7bc7ab37b614b7a2a53c8dad1373b3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void terminalColor</definition>
        <argsstring>(int colorCode, bool isBold)</argsstring>
        <name>terminalColor</name>
        <param>
          <type>int</type>
          <declname>colorCode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isBold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes color of terminal text <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>ANSI color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isBold</parametername>
</parameternamelist>
<parameterdescription>
<para>Bold text or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="50" column="6" bodyfile="include/rt1-assignment3/utils.h" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1aad531f6562212b82c481588c13bfa284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearTerminal</definition>
        <argsstring>()</argsstring>
        <name>clearTerminal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the terminal and resets it to initial state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="63" column="6" bodyfile="include/rt1-assignment3/utils.h" bodystart="63" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a2e9f1bec060b2f2e249b230116766fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void displayText</definition>
        <argsstring>(std::string str, int delay)</argsstring>
        <name>displayText</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints text with typing effect <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to be printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay between each character, in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="79" column="6" bodyfile="include/rt1-assignment3/utils.h" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="utils_8h_1a80a898149f46f14bee685208f51d3b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isStringNumeric</definition>
        <argsstring>(std::string str)</argsstring>
        <name>isStringNumeric</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if string is numeric or not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rt1-assignment3/utils.h" line="90" column="6" bodyfile="include/rt1-assignment3/utils.h" bodystart="90" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;termios.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"></codeline>
<codeline lineno="14"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearInputBuffer()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detectKeyPress<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>orig_term_attr;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>new_term_attr;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>terminal<sp/>to<sp/>raw<sp/>mode<sp/>rather<sp/>than<sp/>canonical<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>tcgetattr(fileno(stdin),<sp/>&amp;orig_term_attr);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>memcpy(&amp;new_term_attr,<sp/>&amp;orig_term_attr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>termios));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>new_term_attr.c_lflag<sp/>&amp;=<sp/>~(ECHO|ICANON);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>new_term_attr.c_cc[VTIME]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>new_term_attr.c_cc[VMIN]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>tcsetattr(fileno(stdin),<sp/>TCSANOW,<sp/>&amp;new_term_attr);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>a<sp/>character<sp/>from<sp/>the<sp/>stdin<sp/>stream<sp/>without<sp/>blocking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>EOF<sp/>(-1)<sp/>if<sp/>no<sp/>character<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>input<sp/>=<sp/>getchar();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original<sp/>terminal<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>tcsetattr(fileno(stdin),<sp/>TCSANOW,<sp/>&amp;orig_term_attr);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>terminalColor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorCode,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBold)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>std::string<sp/>specialCode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isBold)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>specialCode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>specialCode<sp/>&lt;&lt;<sp/>colorCode<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearTerminal()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\033c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>terminalColor(31,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;==========================\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;=<sp/>LUNAR<sp/>ROVER<sp/>CONTROLLER<sp/>=\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;==========================\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>terminalColor(37,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>displayText<sp/>(std::string<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delay)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>str[i];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>usleep(delay);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStringNumeric(std::string<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.length();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isdigit(str[i]))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/rt1-assignment3/utils.h"/>
  </compounddef>
</doxygen>
